# IDENTITY (ContextIdApplicationContextInitializer)
spring.application.name = vehicle-profile
spring.application.version = ${APP_VERSION}
spring.application.description = vehicle profiling spring boot service
spring.application.title = Restful API

# enable spring boot actuator endpoints
management.endpoints.web.exposure.include = *

# spring boot profiles
spring.profiles.active = prod
spring.output.ansi.enabled = ALWAYS

# ----------------------------------------
# APPLICATION SERVER PROPERTIES
# ----------------------------------------
server.port = 8084
server.servlet.context-path = /
server.ssl.enabled = false
server.ssl.key-store = ../keystore.p12

# Whether response compression is enabled.
server.compression.enabled = false
server.servlet.encoding.force = true
server.servlet.encoding.charset = UTF-8
# List of userEntity-agents to exclude from compression.
#server.compression.excluded-userEntity-agents=

# Comma-separated list of MIME types that should be compressed.
server.compression.mime-types = text/html,text/xml,text/plain,text/css,text/javascript,application/javascript

# Minimum "Content-Length" value that is required for compression to be performed.
server.compression.min-response-size = 2048

# ----------------------------------------
# Database Migration
# ----------------------------------------
spring.flyway.enabled = true

# ----------------------------------------
# MySQL DataSource
# ----------------------------------------
spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver
spring.datasource.url = ${MYSQL_DB_CONNECTION}
spring.datasource.username = ${MYSQL_DB_USERNAME}
spring.datasource.password = ${MYSQL_DB_PASSWORD}

# spring JPA
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = none
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.enable_lazy_load_no_trans = false
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# spring batch
spring.batch.jdbc.initialize-schema = ALWAYS

# logging
logging.file.path = /opt/vehicle-profile/logs
logging.level.root = WARN
logging.level.org.springframework.security = INFO
logging.level.com.jumkid.share = TRACE
logging.level.com.jumkid.vehicle = TRACE
logging.pattern.console = %d{yy-MM-dd E HH:mm:ss.SSS} [%p] [JID %X{Journey-ID}] --- %logger{0} \\t:\\t %m\\n

# ----------------------------------------
# vehicle profile properties
# ----------------------------------------
# enable spring security token filter
com.jumkid.jwt.token.enable = true
com.jumkid.jwt.token.validate = false
com.jumkid.jwt.token.client.id = ${KEYCLOAK_CLIENT_ID}
com.jumkid.jwt.token.client.secret = ${KEYCLOAK_CLIENT_SECRET}
com.jumkid.jwt.token.fetch-url = http://${KEYCLOAK_HOST}:${KEYCLOAK_PORT}/auth/realms/jumkid/protocol/openid-connect/token
com.jumkid.jwt.token.introspect-url = http://${KEYCLOAK_HOST}:${KEYCLOAK_PORT}/auth/realms/jumkid/protocol/openid-connect/userinfo
com.jumkid.api.user-info = http://${API_GATEWAY_HOST}:${API_GATEWAY_PORT}/v1/user

# ----------------------------------------
# ELASTICSEARCH PROPERTIES
# ----------------------------------------
elasticsearch.cluster.name = ${ELASTICSEARCH_CLUSTER_NAME}
elasticsearch.host = ${ELASTICSEARCH_HOST}
elasticsearch.port = ${ELASTICSEARCH_PORT}
elasticsearch.user.name = ${ELASTICSEARCH_USERNAME}
elasticsearch.user.password = ${ELASTICSEARCH_PASSWORD}
elasticsearch.http.protocol = https
elasticsearch.keystore.path = ${ELASTICSEARCH_KEYSTORE_PATH}
elasticsearch.keystore.pass = ${ELASTICSEARCH_KEYSTORE_PASSWORD}
elasticsearch.keystore.format = pkcs12
elasticsearch.aggregation.fields.mapping = { \
  'make':'make.raw', \
  'model':'model.raw', \
  'trimLevel':'trimLevel.raw', \
  'category':'category.raw', \
  'vehicleEngine.type':'vehicleEngine.type.raw', \
  'vehicleEngine.fuelType':'vehicleEngine.fuelType.raw', \
  'vehicleEngine.manufacturerEngineCode':'vehicleEngine.manufacturerEngineCode.raw', \
  'vehicleTransmission.type':'vehicleTransmission.type.raw', \
  'vehicleTransmission.automaticType':'vehicleTransmission.automaticType.raw', \
  'vehicleTransmission.drivetrain':'vehicleTransmission.drivetrain.raw' \
  }

# ----------------------------------------
# KAFKA PROPERTIES
# ----------------------------------------
spring.kafka.bootstrap-servers = ${KAFKA_HOST}:${KAFKA_PORT}
spring.kafka.topic.name.vehicle.create = vehicle.create
spring.kafka.topic.name.vehicle.delete = vehicle.delete
spring.kafka.consumer.group-id = 0

# ----------------------------------------
# internal api
# ----------------------------------------
internal.api.content-vault = http://${CONTENT_VAULT_HOST}:${CONTENT_VAULT_PORT}
internal.api.content-vault.clone = /gallery/%s/clone
internal.api.user = http://${API_GATEWAY_HOST}:${API_GATEWAY_PORT}/v1/user